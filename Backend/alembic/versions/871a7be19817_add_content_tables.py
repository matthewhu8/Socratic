"""Add content tables

Revision ID: 871a7be19817
Revises: ae5e96714594
Create Date: 2025-06-24 14:00:14.153919

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '871a7be19817'
down_revision: Union[str, Sequence[str], None] = 'ae5e96714594'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_previous_year_questions_id'), table_name='previous_year_questions')
    op.drop_table('previous_year_questions')
    op.drop_index(op.f('ix_user_question_preferences_id'), table_name='user_question_preferences')
    op.drop_table('user_question_preferences')
    op.add_column('youtube_quiz_results', sa.Column('youtube_url', sa.String(), nullable=True))
    op.add_column('youtube_quiz_results', sa.Column('youtube_id', sa.String(), nullable=True))
    op.add_column('youtube_quiz_results', sa.Column('raw_quiz', sa.JSON(), nullable=True))
    op.alter_column('youtube_quiz_results', 'student_answers',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('youtube_quiz_results', 'score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.drop_column('youtube_quiz_results', 'subject')
    op.drop_column('youtube_quiz_results', 'youtube_video_id')
    op.drop_column('youtube_quiz_results', 'quiz_data')
    op.drop_column('youtube_quiz_results', 'completed_at')
    op.drop_column('youtube_quiz_results', 'correct_answers')
    op.drop_column('youtube_quiz_results', 'total_questions')
    op.drop_column('youtube_quiz_results', 'grade_level')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('youtube_quiz_results', sa.Column('grade_level', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('youtube_quiz_results', sa.Column('total_questions', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('youtube_quiz_results', sa.Column('correct_answers', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('youtube_quiz_results', sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('youtube_quiz_results', sa.Column('quiz_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('youtube_quiz_results', sa.Column('youtube_video_id', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('youtube_quiz_results', sa.Column('subject', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.alter_column('youtube_quiz_results', 'score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('youtube_quiz_results', 'student_answers',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=False)
    op.drop_column('youtube_quiz_results', 'raw_quiz')
    op.drop_column('youtube_quiz_results', 'youtube_id')
    op.drop_column('youtube_quiz_results', 'youtube_url')
    op.create_table('user_question_preferences',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('marked_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('hide_until', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['previous_year_questions.id'], name=op.f('user_question_preferences_question_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['student_users.id'], name=op.f('user_question_preferences_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_question_preferences_pkey'))
    )
    op.create_index(op.f('ix_user_question_preferences_id'), 'user_question_preferences', ['id'], unique=False)
    op.create_table('previous_year_questions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('question_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('subject', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('grade', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exam_board', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('difficulty_level', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('marks', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('topic', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('answer', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('solution_explanation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('previous_year_questions_pkey'))
    )
    op.create_index(op.f('ix_previous_year_questions_id'), 'previous_year_questions', ['id'], unique=False)
    # ### end Alembic commands ###
